{"version":3,"sources":["components/Header/vv.svg","components/Header/Header.js","components/BigText/BigText.js","components/BannerChart/BannerChart.js","components/AutoWidth/AutoWidth.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","style","width","height","src","vv","alt","Component","BigText","tweenDash","l","this","getTotalLength","i","d3","t","randomIntFromInterval","min","max","Math","floor","random","randData","count","data","prevValue","dir","push","id","value","BannerChart","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","computed","setup","update","cRoot","root","g","append","chart","classed","console","log","colorScale","range","map","maxValues","d","e","yMax","padding","top","right","bottom","left","plotWidth","plotHeight","xScale","domain","yScale","line","x","y","curve","computeProps","attr","concat","updateChart","_this$computed","linesBinding","selectAll","linesEnter","enter","path","transition","duration","delay","attrTween","merge","_this2","_this$props","ref","node","defaultProps","AutoWidth","state","defaultRenderWidth","debounceTime","updateWidth","debounce","bind","assertThisInitialized","window","addEventListener","parentMayResize","cancel","removeEventListener","ReactDOM","findDOMNode","domWidth","getResizeDOMNode","offsetWidth","setState","childToRender","child","children","React","cloneElement","App","Container","components_Header_Header","Row","Col","components_AutoWidth_AutoWidth","components_BannerChart_BannerChart","components_BigText_BigText","Boolean","location","hostname","match","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9849bed8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vv.0127b318.svg\";","import React, { Component } from 'react';\nimport vv from './vv.svg';\nimport './Header.scss';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"Header\">\n        <ul className=\"left\">\n          <li>Our Work</li>\n        </ul>\n        <img style={{ width: 60, height: 60 }} src={vv} className=\"logo\" alt=\"logo\" />\n        <ul className=\"right\">\n          <li>Hire Us</li>\n        </ul>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './BigText.scss';\n\nclass BigText extends Component {\n  render() {\n    return (\n      <div className=\"BigText\">\n        <div className=\"words\">\n          <span className=\"word viva\">\n            V<span className=\"little\">I</span>V<span className=\"a\">A</span>\n          </span>\n          <span className=\"word viz\">\n            V<span className=\"little\">I</span>Z\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BigText;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nimport './BannerChart.scss';\n\nfunction tweenDash() {\n  const l = this.getTotalLength();\n  const i = d3.interpolateString('0,' + l, l + ',' + l);\n  return function(t) {\n    return i(t);\n  };\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n *\n */\nconst randData = (count, min, max) => {\n  const data = [];\n  let prevValue = 0;\n  for (let i = 0; i < count; i++) {\n    const dir = Math.random() > 0.7 ? -1 : 1;\n    data.push({ id: i, value: Math.max(0, prevValue + randomIntFromInterval(min, max) * dir) });\n    prevValue = data[i].value;\n  }\n  return data;\n};\n\n/**\n *\n */\nfunction computeProps(props) {\n  const { height, width } = props;\n  console.log('computed');\n\n  const colorScale = d3\n    .scaleOrdinal()\n    .range(['#00b092', '#3bb57b', '#62b860', '#88b843', '#aeb624', '#d6af03', '#ffa40d']);\n\n  const lineCount = 10;\n  const dataCount = 100;\n  const dataMin = 0;\n  const dataMax = 10;\n\n  const data = d3.range(0, lineCount).map(() => randData(dataCount, dataMin, dataMax));\n\n  // const data = randData(dataCount, dataMin, dataMax);\n\n  const maxValues = data.map(d => d3.max(d, e => e.value));\n\n  const yMax = d3.max(maxValues);\n\n  const padding = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20,\n  };\n\n  const plotWidth = width - padding.left - padding.right;\n  const plotHeight = height - padding.top - padding.bottom;\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([0, dataCount])\n    .range([0, plotWidth]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, yMax])\n    .range([plotHeight, 0]);\n\n  const line = d3\n    .line()\n    .x(d => xScale(d.id))\n    .y(d => yScale(d.value))\n    .curve(d3.curveStepBefore);\n\n  return { data, padding, plotHeight, plotWidth, line, xScale, yScale, colorScale };\n}\n\n/**\n * BannerChart\n */\nclass BannerChart extends Component {\n  static defaultProps = {\n    height: 400,\n  };\n\n  constructor(props) {\n    super(props);\n    this.computed = {};\n  }\n\n  /**\n   * When the react component mounts, setup the d3 vis\n   */\n  componentDidMount() {\n    this.setup();\n    this.update();\n  }\n\n  /**\n   * When the react component updates, update the d3 vis\n   */\n  componentDidUpdate() {\n    this.update();\n  }\n\n  /**\n   *\n   */\n  setup() {\n    const cRoot = d3.select(this.root);\n\n    this.g = cRoot.append('g');\n\n    this.chart = this.g.append('g').classed('chart-group', true);\n  }\n\n  /**\n   *\n   */\n  update() {\n    this.computed = computeProps(this.props);\n    const { padding } = this.computed;\n    this.g.attr('transform', `translate(${padding.left} ${padding.top})`);\n\n    this.updateChart();\n  }\n\n  updateChart() {\n    const { data, line, colorScale, plotWidth } = this.computed;\n\n    const linesBinding = this.g.selectAll('.line').data(data);\n    function transition(path) {\n      path\n        .transition()\n        .duration(5000)\n        .delay((d, i) => i * 500)\n        .attrTween('stroke-dasharray', tweenDash);\n    }\n\n    const linesEnter = linesBinding\n      .enter()\n      .append('path')\n      .classed('line', true)\n      .attr('fill', 'none')\n      .attr('stroke-dasharray', `0,${plotWidth}`)\n      .attr('stroke', (d, i) => colorScale(i))\n      .attr('stroke-width', 3)\n      .attr('d', line)\n      .call(transition);\n\n    const linesMerge = linesBinding.merge(linesEnter);\n  }\n\n  /**\n   *\n   */\n  render() {\n    const { height, width } = this.props;\n    return (\n      <div className=\"BannerChart\">\n        <svg\n          className=\"chart\"\n          ref={node => {\n            this.root = node;\n          }}\n          height={height}\n          width={width}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BannerChart;\n","/**\n * @copyright 2018 Zymergen\n */\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nconst propTypes = {\n  children: PropTypes.object,\n\n  /* The amount of delay between debounced calls (default: 100) */\n  debounceTime: PropTypes.number,\n\n  /* If set, the default width is set to this value and the child is\n     rendered. If null, the child is not rendered until a width is provided */\n  defaultRenderWidth: PropTypes.number,\n\n  /* If true, the component checks on componentDidUpdate to see if it needs to resize */\n  parentMayResize: PropTypes.bool,\n};\n\nconst defaultProps = {\n  parentMayResize: false,\n  defaultRenderWidth: null,\n  debounceTime: 100,\n};\n\n/**\n * Component for automatically setting a width prop to the DOM\n * node of the first child. Note that checking offsetWidth is a\n * somewhat expensive operation (forced reflow), so try and leave\n * `parentMayResize` false if you are having performance issues.\n *\n * Example usage:\n * <AutoWidth>\n *   <MyComponent />\n * </AutoWidth>\n *\n * MyComponent gets a `width` prop set.\n *\n */\nclass AutoWidth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: props.defaultRenderWidth,\n    };\n\n    if (props.debounceTime) {\n      this.updateWidth = debounce(this.updateWidth.bind(this), props.debounceTime);\n    } else {\n      this.updateWidth = this.updateWidth.bind(this);\n    }\n  }\n\n  componentDidMount() {\n    this.updateWidth();\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentDidUpdate() {\n    const { parentMayResize } = this.props;\n\n    // have to update width of the parent can cause a resize without a window resize\n    // e.g. something collapses or expands.\n    if (parentMayResize) {\n      this.updateWidth();\n    }\n  }\n\n  componentWillUnmount() {\n    this.updateWidth.cancel();\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  getResizeDOMNode() {\n    return ReactDOM.findDOMNode(this);\n  }\n\n  // Call set state to update the width so it starts an update of the child component\n  updateWidth() {\n    const { width } = this.state;\n    const domWidth = this.getResizeDOMNode().offsetWidth;\n    if (width !== domWidth) {\n      this.setState({\n        width: domWidth,\n      });\n    }\n  }\n\n  render() {\n    const { width } = this.state;\n\n    if (process.env.NODE_ENV !== 'production' && React.Children.count(this.props.children) > 1) {\n      console.warn('AutoWidth only works with a single child element.');\n    }\n\n    const child = this.props.children;\n    let childToRender;\n\n    // if we have a child and a width is provided, render the child with the width as a prop\n    if (child && width != null) {\n      childToRender = React.cloneElement(child, { width: this.state.width });\n    }\n\n    // we rely on this div getting the full width from the browser's layout\n    // and read its offsetWidth to set as the width to the child component.\n    return <div className=\"auto-width\">{childToRender}</div>;\n  }\n}\n\nAutoWidth.propTypes = propTypes;\nAutoWidth.defaultProps = defaultProps;\n\nexport default AutoWidth;\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport Header from '../Header/Header';\nimport BigText from '../BigText/BigText';\nimport BannerChart from '../BannerChart/BannerChart';\nimport AutoWidth from '../AutoWidth/AutoWidth';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Header />\n          <Row>\n            <Col>\n              <div className=\"banner\">\n                <div className=\"banner-item\">\n                  <AutoWidth>\n                    <BannerChart />\n                  </AutoWidth>\n                </div>\n                <div className=\"banner-item\">\n                  <BigText />\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}